[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sepsis-sentinel"
version = "1.0.0"
description = "Sistema de Detecção Precoce de Sepse usando Machine Learning"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Sepsis Sentinel Team", email = "contato@sepsis-sentinel.com"}
]
maintainers = [
    {name = "Sepsis Sentinel Team", email = "contato@sepsis-sentinel.com"}
]
keywords = [
    "sepsis", "machine learning", "healthcare", "medical", 
    "random forest", "fastapi", "streamlit", "prediction",
    "clinical", "hospital", "icu", "vital signs"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "streamlit>=1.28.1",
    "pandas>=2.1.3",
    "numpy>=1.25.2",
    "scikit-learn>=1.3.2",
    "joblib>=1.3.2",
    "python-multipart>=0.0.6",
    "pydantic>=2.5.0",
    "plotly>=5.17.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
docker = [
    "docker>=6.0.0",
    "docker-compose>=1.29.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.24.0",
    "streamlit-testing>=0.2.0",
]

[project.urls]
Homepage = "https://github.com/seu-usuario/sepsis-sentinel-api"
Documentation = "https://sepsis-sentinel.readthedocs.io/"
Repository = "https://github.com/seu-usuario/sepsis-sentinel-api"
"Bug Tracker" = "https://github.com/seu-usuario/sepsis-sentinel-api/issues"
Changelog = "https://github.com/seu-usuario/sepsis-sentinel-api/blob/main/CHANGELOG.md"

[project.scripts]
sepsis-train = "ml.train_model:main"
sepsis-api = "api.main:main"
sepsis-frontend = "frontend.app:main"

[tool.setuptools]
packages = ["api", "ml", "frontend", "scripts"]

[tool.setuptools.package-data]
"ml" = ["*.joblib", "*.pkl", "*.h5"]
"api" = ["*.yaml", "*.yml", "*.json"]
"frontend" = ["*.toml", "*.css", "*.js"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["api", "ml", "frontend", "scripts"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=api",
    "--cov=ml",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["api", "ml", "frontend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
